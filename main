(defun print_matrix (matrix)
  (format t "~%(~a" (car matrix))
  (mapcar (lambda (row) (format t "~% ~a" row)) (cdr matrix))
  (format t ")")
)

(defun random_matrix (rows columns)
  ;(mapcar #'random (make-list 10 :initial-element 101))
  (mapcar (lambda (row) (mapcar #'random (make-list columns :initial-element (get-universal-time)))) (make-list rows :initial-element '()))
)

(defun transpose (matrix)
  (apply #'mapcar #'list matrix)
)

(defun dot (a b)
  (apply #'+ (mapcar #'* a b))
)

(defun matrix_product (A B)
  (if (= (length B) (length (car A)))
    (let ((BT (transpose B)))
      (mapcar 
        (lambda (rowA)
          (mapcar 
            (lambda (colB)
              (dot rowA colB)
            )
            BT
          )
        )
        A
      )
    )
    (error "invalid matrix shapes")
  )
)

(defun matrix_sum (A B)
  (mapcar (lambda (rowA rowB) (mapcar #'+ rowA rowB)) A B)
)

;_____________________________________________________________

(defun sum_row (A B)
  (mapcar (lambda (row) (mapcar #'+ row (car B))) A)
)

(defun prod (A B)
  (mapcar (lambda (Arow Brow) (mapcar #'* Arow Brow)) A B)
)

(defun AxBt (A Bt)
  (if (= (length (car Bt)) (length (car A)))
    (mapcar 
      (lambda (rowA)
        (mapcar 
          (lambda (colB)
            (dot rowA colB)
          )
          Bt
        )
      )
      A
    )
    (error "invalid matrix shapes")
  )
)

(defun AtxB (At B)
  (matrix_product (transpose At) B)
)


;(print_matrix (transpose '((1 2) (3 5))))
;(print (dot '(1 2) '(3 5)))
;(print_matrix (matrix_product '((1 2) (3 5)) '((7) (11))))
;(print_matrix (AxBt '((1 2) (3 5)) '((7 11))))
;(print_matrix (AtxB (transpose '((1 2) (3 5))) '((7) (11))))

;_______________________________________________________________

(defclass Layer ()
  (
    (_weights :accessor weights)
    (_biases :accessor biases)
    (_output :accessor output)
  )
)

(defmethod initialize-instance :after ((this Layer) &rest initargs &key n_neurons n_inputs)
  (progn
    (setf (weights this) (random_matrix n_inputs n_neurons))
    (setf (biases this) (list (make-list n_neurons :initial-element 0)))
  )
)

(defmethod forward ((this Layer) inputs)
  (setf (output this) 
    (sum_row 
      (matrix_product inputs (weights this)) 
      (biases this)
    )
  )
)

;________

(defclass ReLU (Layer)
  ()
)

(defmethod forward :after ((this ReLU) inputs)
  (setf (output this) 
    (mapcar 
      (lambda (row) 
        (mapcar 
          (lambda (element)
            (if (> 0 element)
              0
              element
            )
          ) 
          row
        )
      )
      (output this)
    )
  )
)

(defclass LeakyReLU (Layer)
  ()
)

(defmethod forward :after ((this LeakyReLU) inputs)
  (setf (output this) 
    (mapcar 
      (lambda (row) 
        (mapcar 
          (lambda (element)
            (if (> 0 element)
              (* element 0.1)
              element
            )
          ) 
          row
        )
      )
      (output this)
    )
  )
)

;_______________________________________________________________

(defvar X '((1 2 3 2.5)
                 (2 5 -1 2)
                 (-1.5 2.7 3.3 -0.8)))

(defvar weights '((0.2 0.8 -0.5 1.0)
                  (0.5 -0.91 0.26 -0.5)
                  (-0.26 -0.27 0.17 0.87)))

(defvar biases '(2 3 0.5))


(defvar layer1 (make-instance 'LeakyReLU :n_neurons 3 :n_inputs 4))
(forward layer1 X)
(print_matrix (output layer1))
(inspect layer1)


